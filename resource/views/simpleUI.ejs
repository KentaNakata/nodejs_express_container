<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Matching Game</title>
    <style>
      #messagesDiv {
        margin-bottom: 20px;
        border: 1px solid #ccc;
        padding: 10px;
        height: 200px;
        overflow-y: scroll;
      }
    </style>
  </head>

  <body>
    <h1>Matching Game</h1>

    <b>Message:</b><br />
    <div id="messagesDiv"></div>

    <b>Message Input:</b><br />
    <textarea
      id="messageInput"
      placeholder="Type your message here..."
    ></textarea
    ><br />

    <b>Name:</b> <span id="name"></span><br />
    <textarea id="nameInput" placeholder="Type your name here..."></textarea
    ><br />

    <b>Age:</b> <span id="age"></span><br />
    <textarea id="ageInput" placeholder="Type your age here..."></textarea
    ><br />

    <b>Score:</b> <span id="score"></span><br />

    <b>State:</b> <span id="state"></span><br />

    <b>Opponent Name:</b> <span id="opponentName"></span><br />

    <b>Opponent Age:</b> <span id="opponentAge"></span><br />

    <b>Opponent X:</b> <span id="opponentX"></span><br />

    <b>Opponent Y:</b> <span id="opponentY"></span><br />

    <br /><button id="sendButton">Send</button><br />

    <script>
      const messagesDiv = document.getElementById("messagesDiv");
      const messageInput = document.getElementById("messageInput");
      const nameInput = document.getElementById("nameInput");
      const ageInput = document.getElementById("ageInput");
      const sendButton = document.getElementById("sendButton");
      let intervalId = null;

      let name = null; //TODO 構造化
      let age = null;
      let score = null;
      let state = null;
      let opponentName = null;
      let opponentAge = null;
      let opponentX = null;
      let opponentY = null;

      // WebSocketの接続
      const address = "ws://localhost:8080";
      // const address = "ws://192.168.137.1:8080";
      const socket = new WebSocket(address);

      // 接続時の処理
      socket.onopen = () => {
        displayMessage("Connected to WebSocket server");
      };

      // 受信時の処理
      socket.onmessage = (event) => {
        const parsedData = JSON.parse(event.data);

        if ("message" in parsedData) {
          displayMessage("[Server]: " + String(parsedData.message));
        }
        if ("score" in parsedData) {
          score = parseInt(parsedData.score, 10);
          document.getElementById("score").innerHTML = score;
        }
        if ("state" in parsedData) {
          state = String(parsedData.state);
          document.getElementById("state").innerHTML = state;
          if (state === "active" || state === "waiting") {
            startInterval();
          } else {
            stopInterval();
            opponentName = null;
            opponentAge = null;
            opponentX = null;
            opponentY = null;
            document.getElementById("opponentName").innerHTML = "";
            document.getElementById("opponentAge").innerHTML = "";
            document.getElementById("opponentX").innerHTML = "";
            document.getElementById("opponentY").innerHTML = "";
          }
        }
        if ("opponentName" in parsedData) {
          opponentName = String(parsedData.opponentName);
          document.getElementById("opponentName").innerHTML = opponentName;
        }
        if ("opponentAge" in parsedData) {
          opponentAge = parseInt(parsedData.opponentAge, 10);
          document.getElementById("opponentAge").innerHTML = opponentAge;
        }
        if ("opponentX" in parsedData) {
          opponentX = parseInt(parsedData.opponentX, 10);
          document.getElementById("opponentX").innerHTML = opponentX;
        }
        if ("opponentY" in parsedData) {
          opponentY = parseInt(parsedData.opponentY, 10);
          document.getElementById("opponentY").innerHTML = opponentY;
        }
      };

      // エラー時の処理
      socket.onerror = (error) => {
        displayMessage("WebSocket Error: ", error);

        stopInterval();
      };

      // 切断時の処理
      socket.onclose = () => {
        displayMessage("WebSocket connection closed");

        stopInterval();
      };

      // メッセージの表示
      function displayMessage(message) {
        const newMessage = document.createElement("p");
        newMessage.textContent = message;
        messagesDiv.appendChild(newMessage);
        messagesDiv.scrollTop = messagesDiv.scrollHeight; // 最新メッセージの表示
      }

      // 自分の情報の設定
      function setInfo(message) {
        name = String(nameInput.value);
        age = Math.max(parseInt(ageInput.value, 10), 0);
        document.getElementById("name").innerHTML = name;
        document.getElementById("age").innerHTML = age;
      }

      // 送信処理
      sendButton.addEventListener("click", () => {
        setInfo();

        // 入力欄のクリア
        messageInput.value = "";
        nameInput.value = "";
        ageInput.value = "";
        messageInput.disabled = true;
        nameInput.disabled = true;
        ageInput.disabled = true;
        sendButton.disabled = true;

        const data = {
          message: messageInput.value,
          name: name,
          age: age,
        };

        // データの送信
        socket.send(JSON.stringify(data));
      });

      // 定期送信の開始
      function startInterval(interval_ms = 2000) {
        if (intervalId !== null) {
          return;
        }
        intervalId = setInterval(() => {
          const data = {
            X: null,
            Y: null,
          };

          // データの送信
          socket.send(JSON.stringify(data));
        }, interval_ms);
      }

      // 定期送信の停止
      function stopInterval() {
        if (intervalId === null) {
          return;
        }
        clearInterval(intervalId);
        intervalId = null;
      }
    </script>
  </body>
</html>
